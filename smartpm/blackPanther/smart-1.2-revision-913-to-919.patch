=== modified file 'Makefile'
--- Makefile	2009-03-06 17:48:27 +0000
+++ Makefile	2009-06-27 17:50:37 +0000
@@ -48,7 +48,7 @@
 
 test:
 	$(PYTHON) setup.py build_ext -i
-	LANG=C $(PYTHON) test $(TEST)
+	LC_ALL=C PYTHONPATH="$(PYTHONPATH):$(shell pwd)" ./test $(TEST)
 
 .PHONY: clean smart.pot update-po check-po test
 
=== modified file 'smart/plugins/urpmichannelsync.py'
--- smart/plugins.old/urpmichannelsync.py	1970-01-01 01:00:00.000000000 +0100
+++ smart/plugins/urpmichannelsync.py	2010-11-16 22:40:30.000000000 +0000
@@ -0,0 +1,236 @@
+# -*- coding: utf-8 -*-
+#
+# Copyright (c) 2008 Per Øyvind Karlsen
+#
+# Written by Per Øyvind Karlsen <peroyvind@mandriva.org>
+# Parts of code based on urpmi2smart by Michael Scherer <misc@mandriva.org> 
+#
+# This file is part of Smart Package Manager.
+#
+# Smart Package Manager is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as published
+# by the Free Software Foundation; either version 2 of the License, or (at
+# your option) any later version.
+#
+# Smart Package Manager is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Smart Package Manager; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+#
+import posixpath
+try:
+    from hashlib import md5
+except ImportError:
+    from md5 import md5
+import os
+
+# be compatible with 2.3
+import sys
+if sys.version_info < (2, 4):
+    from sets import Set as set
+
+from smart.channel import *
+from smart import *
+from smart.media import discoverFstabMedias
+from smart.fetcher import Fetcher
+
+URPMI_CONFIG_DIR = "/etc/urpmi/"
+URPMI_CONFIG = URPMI_CONFIG_DIR + "urpmi.cfg"
+URPMI_MEDIA_DIR = "/var/lib/urpmi/"
+URPMI_MIRRORS_CACHE = "/var/cache/urpmi/mirrors.cache"
+
+def fetch_urpmi_cfg(filename):
+    fetcher = Fetcher()
+    if os.path.isfile(URPMI_MIRRORS_CACHE):
+        mirrorsfile = open(URPMI_MIRRORS_CACHE)
+        mirrorscache = eval(mirrorsfile.read().replace('=>', ':').replace(';',''))
+        mirrorsfile.close()
+    else:
+        mirrorscache = None
+
+    config=[]
+    in_block = False
+    skip = False
+    urpmi_cfg_f=open(filename)
+    for line in urpmi_cfg_f.readlines():
+        line = line.strip()
+        if len(line) <= 0:
+            continue
+        if line[-1] == "}":
+            in_block = False
+	    skip = False
+	if skip:
+	    continue
+        if line[-1] == "{":
+            in_block = True
+            s = line.split(" ")
+            if len(s) == 1:
+		skip = True
+                continue
+            config.append(dict())
+            config[-1]["name"] = " ".join(s[0:-2]).replace("\\", "")
+            if s[-2]:
+                config[-1]["url"] = s[-2]
+            continue
+        if not in_block:
+            continue
+        if line.find(": ") > 0:
+            (key,value) = line.strip().split(": ")
+            if key == "mirrorlist":
+                if mirrorscache:
+                    if mirrorscache.has_key(value):
+                        value = mirrorscache[value]
+                        # Make sure to find a mirror using a protocol that we
+                        # actually handle...
+                        for mirror in value["list"]:
+                            scheme = mirror["url"].split(":")[0]
+                            if fetcher.getHandler(scheme, None):
+                                config[-1]["url"] = mirror["url"]
+                                break
+            config[-1][key.strip()] = value
+        else:
+            config[-1][line.strip()] = True
+    urpmi_cfg_f.close()
+    return config
+
+def find_urpmi_password(url):
+    machine = url[url.rfind("@")+1:].split("/")[0]
+    login = url[:url.rfind("@")].split("://")
+    if len(login) >= 2:
+        login = login[1]
+        try:
+            fp = open(URPMI_CONFIG_DIR + "netrc")
+            line = fp.readline()
+            while line:
+                netrc = {}
+                splitted = line.strip("\n").split(" ")
+                for i in xrange(0, len(splitted), 2):
+                    netrc[splitted[i]] = splitted[i+1]
+                if netrc["machine"] == machine and netrc["login"] == login:
+                    url = "%s:%s@%s" % (url[:url.rfind("@")], netrc["password"], url[url.rfind("@")+1:])
+                    break
+                line = fp.readline()
+
+            fp.close()
+        except IOError, e:
+            pass
+
+    return url
+
+def _loadMediaList(filename):
+
+    # The computed aliases we have seen in the given file.
+    seen = set()
+
+    urpmi_cfg = fetch_urpmi_cfg(filename)
+
+    for media in urpmi_cfg:
+        name = media["name"]
+        alias = "urpmisync-%s" % name
+        priority = 0
+        baseurl = None
+        
+        if not media.has_key("url"): 
+            continue
+
+        removable = media["url"].startswith("cdrom://")
+        if removable:
+            # This detection isn't really state of the art, to match urpmi we'd
+            # have to implement a more complete cdrom support in smart itself,
+            # in stead we'll just try determine the path to set it once and
+            # mark the media as removable, no automatic mounting of cdrom, use
+            # of hal or anything...
+            # cdrom path can also be overriden with sysconf as you see below...
+
+            cdrom = sysconf.get("cdrom-mount-point")
+            if not cdrom:
+                medias = discoverFstabMedias("/etc/fstab")
+                if len(medias) == 0:
+                    medias = discoverFstabMedias("/etc/mtab")
+                
+                if len(medias) > 0:
+                    cdrom = medias[0].getMountPoint()
+
+            if cdrom:
+                baseurl = media["url"].replace("cdrom:/", cdrom)
+            else:
+                continue
+        else:
+            baseurl = find_urpmi_password(media["url"].replace("ssh://", "scp://"))
+
+        hdlurl = baseurl + "/"
+        
+        if media.has_key("with_hdlist"):
+            hdlurl += media["with_hdlist"]
+        elif media.has_key("media_info_dir"):
+            hdlurl += media["media_info_dir"] + "/synthesis.hdlist.cz"
+        else:
+            if media.has_key("with-dir"):
+                hdlurl += media["with-dir"] + "/"
+                baseurl += "/" + media["with-dir"] + "/"
+            hdlurl += "media_info/synthesis.hdlist.cz"
+ 
+        seen.add(alias)
+
+        data = {"type": "urpmi",
+                "name": name,
+                "baseurl": baseurl,
+                "hdlurl": hdlurl,
+                "disabled": media.has_key("ignore"),
+                "removable": removable,
+                "priority": priority}
+        # See if creating a channel works.
+        try:
+            createChannel(alias, data)
+        except Error, e:
+            iface.error(_("While using %s: %s") % (file.name, e))
+        else:
+            # Store it persistently, without destroying existing setttings.
+            channel = sysconf.get(("channels", alias))
+            if channel is not None:
+                channel.update(data)
+            else:
+                channel = data
+
+            sysconf.set(("channels", alias), channel)
+
+    return seen
+
+
+def syncURPMIChannels(urpmicfg, mediadir, force=None):
+    seen = set()
+
+    sysconf.set("sync-urpmi-mediadir", mediadir, soft=True, weak=True)
+
+    try:
+        # First, the urpmi.cfg file.
+        if os.path.isfile(urpmicfg):
+            seen.update(_loadMediaList(urpmicfg))
+            
+        # Delete the entries which were not seen in current files.
+        channels = sysconf.get("channels")
+        for alias in sysconf.keys("channels"):
+            if alias.startswith("urpmisync-") and alias not in seen:
+                sysconf.remove(("channels", alias)) 
+
+    except:
+        iface.warning("Error occured during syncurpmi, disabling syncurpmi...")
+        sysconf.set("sync-urpmi-medialist", False)
+
+if not sysconf.getReadOnly():
+    if sysconf.get("sync-urpmi-medialist",False):
+        iface.debug(_("Trying to sync urpmi channels..."))
+        syncURPMIChannels(sysconf.get("urpmi-config", URPMI_CONFIG),
+                sysconf.get("urpmi-media-dir", URPMI_MEDIA_DIR))
+    else:
+        # Delete the urpmisync channels if plugin disabled.
+        channels = sysconf.get("channels")
+        for alias in sysconf.keys("channels"):
+            if alias.startswith("urpmisync-"):
+                sysconf.remove(("channels", alias)) 
+
+# vim:ts=4:sw=4:et
